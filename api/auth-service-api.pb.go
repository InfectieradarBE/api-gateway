// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.11.4
// source: auth-service-api.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type JWTRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *JWTRequest) Reset() {
	*x = JWTRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTRequest) ProtoMessage() {}

func (x *JWTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTRequest.ProtoReflect.Descriptor instead.
func (*JWTRequest) Descriptor() ([]byte, []int) {
	return file_auth_service_api_proto_rawDescGZIP(), []int{0}
}

func (x *JWTRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type AppTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AppTokenRequest) Reset() {
	*x = AppTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppTokenRequest) ProtoMessage() {}

func (x *AppTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppTokenRequest.ProtoReflect.Descriptor instead.
func (*AppTokenRequest) Descriptor() ([]byte, []int) {
	return file_auth_service_api_proto_rawDescGZIP(), []int{1}
}

func (x *AppTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type AppTokenValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []string `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *AppTokenValidation) Reset() {
	*x = AppTokenValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppTokenValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppTokenValidation) ProtoMessage() {}

func (x *AppTokenValidation) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppTokenValidation.ProtoReflect.Descriptor instead.
func (*AppTokenValidation) Descriptor() ([]byte, []int) {
	return file_auth_service_api_proto_rawDescGZIP(), []int{2}
}

func (x *AppTokenValidation) GetInstances() []string {
	if x != nil {
		return x.Instances
	}
	return nil
}

type RefreshJWTRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken  string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *RefreshJWTRequest) Reset() {
	*x = RefreshJWTRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshJWTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshJWTRequest) ProtoMessage() {}

func (x *RefreshJWTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshJWTRequest.ProtoReflect.Descriptor instead.
func (*RefreshJWTRequest) Descriptor() ([]byte, []int) {
	return file_auth_service_api_proto_rawDescGZIP(), []int{3}
}

func (x *RefreshJWTRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RefreshJWTRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type TempTokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Expiration int64  `protobuf:"varint,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Purpose    string `protobuf:"bytes,3,opt,name=purpose,proto3" json:"purpose,omitempty"`
	UserId     string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Info       string `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	InstanceId string `protobuf:"bytes,6,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *TempTokenInfo) Reset() {
	*x = TempTokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempTokenInfo) ProtoMessage() {}

func (x *TempTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempTokenInfo.ProtoReflect.Descriptor instead.
func (*TempTokenInfo) Descriptor() ([]byte, []int) {
	return file_auth_service_api_proto_rawDescGZIP(), []int{4}
}

func (x *TempTokenInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TempTokenInfo) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *TempTokenInfo) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *TempTokenInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TempTokenInfo) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *TempTokenInfo) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type TempTokenInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TempTokens []*TempTokenInfo `protobuf:"bytes,1,rep,name=temp_tokens,json=tempTokens,proto3" json:"temp_tokens,omitempty"`
}

func (x *TempTokenInfos) Reset() {
	*x = TempTokenInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempTokenInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempTokenInfos) ProtoMessage() {}

func (x *TempTokenInfos) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempTokenInfos.ProtoReflect.Descriptor instead.
func (*TempTokenInfos) Descriptor() ([]byte, []int) {
	return file_auth_service_api_proto_rawDescGZIP(), []int{5}
}

func (x *TempTokenInfos) GetTempTokens() []*TempTokenInfo {
	if x != nil {
		return x.TempTokens
	}
	return nil
}

type TempToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *TempToken) Reset() {
	*x = TempToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempToken) ProtoMessage() {}

func (x *TempToken) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempToken.ProtoReflect.Descriptor instead.
func (*TempToken) Descriptor() ([]byte, []int) {
	return file_auth_service_api_proto_rawDescGZIP(), []int{6}
}

func (x *TempToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type TokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken       string     `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken      string     `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	ExpiresIn         int32      `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	Profiles          []*Profile `protobuf:"bytes,4,rep,name=profiles,proto3" json:"profiles,omitempty"`
	SelectedProfileId string     `protobuf:"bytes,5,opt,name=selected_profile_id,json=selectedProfileId,proto3" json:"selected_profile_id,omitempty"`
	PreferredLanguage string     `protobuf:"bytes,6,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
}

func (x *TokenResponse) Reset() {
	*x = TokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse) ProtoMessage() {}

func (x *TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse.ProtoReflect.Descriptor instead.
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return file_auth_service_api_proto_rawDescGZIP(), []int{7}
}

func (x *TokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *TokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *TokenResponse) GetExpiresIn() int32 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *TokenResponse) GetProfiles() []*Profile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *TokenResponse) GetSelectedProfileId() string {
	if x != nil {
		return x.SelectedProfileId
	}
	return ""
}

func (x *TokenResponse) GetPreferredLanguage() string {
	if x != nil {
		return x.PreferredLanguage
	}
	return ""
}

var File_auth_service_api_proto protoreflect.FileDescriptor

var file_auth_service_api_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x12,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2d, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x22, 0x0a, 0x0a, 0x4a, 0x57,
	0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x27,
	0x0a, 0x0f, 0x41, 0x70, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x32, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x11, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4a, 0x57, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x6d,
	0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x22, 0x21, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x93, 0x02, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x3c, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x32, 0x83, 0x08, 0x0a, 0x0e, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x69, 0x12, 0x2d, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b,
	0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x61, 0x0a, 0x0e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x2e,
	0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63,
	0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x1a, 0x23,
	0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x57,
	0x54, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x57, 0x54, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x58, 0x0a, 0x08, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4a, 0x57, 0x54,
	0x12, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4a,
	0x57, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63,
	0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x70, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1f, 0x2e,
	0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x59,
	0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x24, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0b, 0x2e, 0x69, 0x6e, 0x66, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x13, 0x50, 0x75, 0x72, 0x67, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x23, 0x2e,
	0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x0b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x05, 0x5a, 0x03, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_auth_service_api_proto_rawDescOnce sync.Once
	file_auth_service_api_proto_rawDescData = file_auth_service_api_proto_rawDesc
)

func file_auth_service_api_proto_rawDescGZIP() []byte {
	file_auth_service_api_proto_rawDescOnce.Do(func() {
		file_auth_service_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_auth_service_api_proto_rawDescData)
	})
	return file_auth_service_api_proto_rawDescData
}

var file_auth_service_api_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_auth_service_api_proto_goTypes = []interface{}{
	(*JWTRequest)(nil),         // 0: inf.auth_service_api.JWTRequest
	(*AppTokenRequest)(nil),    // 1: inf.auth_service_api.AppTokenRequest
	(*AppTokenValidation)(nil), // 2: inf.auth_service_api.AppTokenValidation
	(*RefreshJWTRequest)(nil),  // 3: inf.auth_service_api.RefreshJWTRequest
	(*TempTokenInfo)(nil),      // 4: inf.auth_service_api.TempTokenInfo
	(*TempTokenInfos)(nil),     // 5: inf.auth_service_api.TempTokenInfos
	(*TempToken)(nil),          // 6: inf.auth_service_api.TempToken
	(*TokenResponse)(nil),      // 7: inf.auth_service_api.TokenResponse
	(*Profile)(nil),            // 8: inf.user_management_api.Profile
	(*empty.Empty)(nil),        // 9: google.protobuf.Empty
	(*LoginWithEmailMsg)(nil),  // 10: inf.user_management_api.LoginWithEmailMsg
	(*SignupWithEmailMsg)(nil), // 11: inf.user_management_api.SignupWithEmailMsg
	(*ProfileRequest)(nil),     // 12: inf.user_management_api.ProfileRequest
	(*Status)(nil),             // 13: inf.Status
	(*TokenInfos)(nil),         // 14: inf.TokenInfos
}
var file_auth_service_api_proto_depIdxs = []int32{
	4,  // 0: inf.auth_service_api.TempTokenInfos.temp_tokens:type_name -> inf.auth_service_api.TempTokenInfo
	8,  // 1: inf.auth_service_api.TokenResponse.profiles:type_name -> inf.user_management_api.Profile
	9,  // 2: inf.auth_service_api.AuthServiceApi.Status:input_type -> google.protobuf.Empty
	10, // 3: inf.auth_service_api.AuthServiceApi.LoginWithEmail:input_type -> inf.user_management_api.LoginWithEmailMsg
	11, // 4: inf.auth_service_api.AuthServiceApi.SignupWithEmail:input_type -> inf.user_management_api.SignupWithEmailMsg
	12, // 5: inf.auth_service_api.AuthServiceApi.SwitchProfile:input_type -> inf.user_management_api.ProfileRequest
	0,  // 6: inf.auth_service_api.AuthServiceApi.ValidateJWT:input_type -> inf.auth_service_api.JWTRequest
	3,  // 7: inf.auth_service_api.AuthServiceApi.RenewJWT:input_type -> inf.auth_service_api.RefreshJWTRequest
	1,  // 8: inf.auth_service_api.AuthServiceApi.ValidateAppToken:input_type -> inf.auth_service_api.AppTokenRequest
	4,  // 9: inf.auth_service_api.AuthServiceApi.GenerateTempToken:input_type -> inf.auth_service_api.TempTokenInfo
	6,  // 10: inf.auth_service_api.AuthServiceApi.ValidateTempToken:input_type -> inf.auth_service_api.TempToken
	4,  // 11: inf.auth_service_api.AuthServiceApi.GetTempTokens:input_type -> inf.auth_service_api.TempTokenInfo
	6,  // 12: inf.auth_service_api.AuthServiceApi.DeleteTempToken:input_type -> inf.auth_service_api.TempToken
	4,  // 13: inf.auth_service_api.AuthServiceApi.PurgeUserTempTokens:input_type -> inf.auth_service_api.TempTokenInfo
	13, // 14: inf.auth_service_api.AuthServiceApi.Status:output_type -> inf.Status
	7,  // 15: inf.auth_service_api.AuthServiceApi.LoginWithEmail:output_type -> inf.auth_service_api.TokenResponse
	7,  // 16: inf.auth_service_api.AuthServiceApi.SignupWithEmail:output_type -> inf.auth_service_api.TokenResponse
	7,  // 17: inf.auth_service_api.AuthServiceApi.SwitchProfile:output_type -> inf.auth_service_api.TokenResponse
	14, // 18: inf.auth_service_api.AuthServiceApi.ValidateJWT:output_type -> inf.TokenInfos
	7,  // 19: inf.auth_service_api.AuthServiceApi.RenewJWT:output_type -> inf.auth_service_api.TokenResponse
	2,  // 20: inf.auth_service_api.AuthServiceApi.ValidateAppToken:output_type -> inf.auth_service_api.AppTokenValidation
	6,  // 21: inf.auth_service_api.AuthServiceApi.GenerateTempToken:output_type -> inf.auth_service_api.TempToken
	4,  // 22: inf.auth_service_api.AuthServiceApi.ValidateTempToken:output_type -> inf.auth_service_api.TempTokenInfo
	5,  // 23: inf.auth_service_api.AuthServiceApi.GetTempTokens:output_type -> inf.auth_service_api.TempTokenInfos
	13, // 24: inf.auth_service_api.AuthServiceApi.DeleteTempToken:output_type -> inf.Status
	13, // 25: inf.auth_service_api.AuthServiceApi.PurgeUserTempTokens:output_type -> inf.Status
	14, // [14:26] is the sub-list for method output_type
	2,  // [2:14] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_auth_service_api_proto_init() }
func file_auth_service_api_proto_init() {
	if File_auth_service_api_proto != nil {
		return
	}
	file_global_types_proto_init()
	file_user_management_api_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_auth_service_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppTokenValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshJWTRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempTokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempTokenInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auth_service_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_auth_service_api_proto_goTypes,
		DependencyIndexes: file_auth_service_api_proto_depIdxs,
		MessageInfos:      file_auth_service_api_proto_msgTypes,
	}.Build()
	File_auth_service_api_proto = out.File
	file_auth_service_api_proto_rawDesc = nil
	file_auth_service_api_proto_goTypes = nil
	file_auth_service_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthServiceApiClient is the client API for AuthServiceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthServiceApiClient interface {
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Status, error)
	// Auth:
	LoginWithEmail(ctx context.Context, in *LoginWithEmailMsg, opts ...grpc.CallOption) (*TokenResponse, error)
	SignupWithEmail(ctx context.Context, in *SignupWithEmailMsg, opts ...grpc.CallOption) (*TokenResponse, error)
	SwitchProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	// Token handling:
	ValidateJWT(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*TokenInfos, error)
	RenewJWT(ctx context.Context, in *RefreshJWTRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	// App token handling:
	ValidateAppToken(ctx context.Context, in *AppTokenRequest, opts ...grpc.CallOption) (*AppTokenValidation, error)
	// Temporary Tokens handling:
	GenerateTempToken(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempToken, error)
	ValidateTempToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*TempTokenInfo, error)
	GetTempTokens(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempTokenInfos, error)
	DeleteTempToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*Status, error)
	PurgeUserTempTokens(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*Status, error)
}

type authServiceApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceApiClient(cc grpc.ClientConnInterface) AuthServiceApiClient {
	return &authServiceApiClient{cc}
}

func (c *authServiceApiClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) LoginWithEmail(ctx context.Context, in *LoginWithEmailMsg, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/LoginWithEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) SignupWithEmail(ctx context.Context, in *SignupWithEmailMsg, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/SignupWithEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) SwitchProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/SwitchProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) ValidateJWT(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*TokenInfos, error) {
	out := new(TokenInfos)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/ValidateJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) RenewJWT(ctx context.Context, in *RefreshJWTRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/RenewJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) ValidateAppToken(ctx context.Context, in *AppTokenRequest, opts ...grpc.CallOption) (*AppTokenValidation, error) {
	out := new(AppTokenValidation)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/ValidateAppToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) GenerateTempToken(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempToken, error) {
	out := new(TempToken)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/GenerateTempToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) ValidateTempToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*TempTokenInfo, error) {
	out := new(TempTokenInfo)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/ValidateTempToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) GetTempTokens(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempTokenInfos, error) {
	out := new(TempTokenInfos)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/GetTempTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) DeleteTempToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/DeleteTempToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) PurgeUserTempTokens(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/PurgeUserTempTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceApiServer is the server API for AuthServiceApi service.
type AuthServiceApiServer interface {
	Status(context.Context, *empty.Empty) (*Status, error)
	// Auth:
	LoginWithEmail(context.Context, *LoginWithEmailMsg) (*TokenResponse, error)
	SignupWithEmail(context.Context, *SignupWithEmailMsg) (*TokenResponse, error)
	SwitchProfile(context.Context, *ProfileRequest) (*TokenResponse, error)
	// Token handling:
	ValidateJWT(context.Context, *JWTRequest) (*TokenInfos, error)
	RenewJWT(context.Context, *RefreshJWTRequest) (*TokenResponse, error)
	// App token handling:
	ValidateAppToken(context.Context, *AppTokenRequest) (*AppTokenValidation, error)
	// Temporary Tokens handling:
	GenerateTempToken(context.Context, *TempTokenInfo) (*TempToken, error)
	ValidateTempToken(context.Context, *TempToken) (*TempTokenInfo, error)
	GetTempTokens(context.Context, *TempTokenInfo) (*TempTokenInfos, error)
	DeleteTempToken(context.Context, *TempToken) (*Status, error)
	PurgeUserTempTokens(context.Context, *TempTokenInfo) (*Status, error)
}

// UnimplementedAuthServiceApiServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServiceApiServer struct {
}

func (*UnimplementedAuthServiceApiServer) Status(context.Context, *empty.Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedAuthServiceApiServer) LoginWithEmail(context.Context, *LoginWithEmailMsg) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithEmail not implemented")
}
func (*UnimplementedAuthServiceApiServer) SignupWithEmail(context.Context, *SignupWithEmailMsg) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupWithEmail not implemented")
}
func (*UnimplementedAuthServiceApiServer) SwitchProfile(context.Context, *ProfileRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchProfile not implemented")
}
func (*UnimplementedAuthServiceApiServer) ValidateJWT(context.Context, *JWTRequest) (*TokenInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateJWT not implemented")
}
func (*UnimplementedAuthServiceApiServer) RenewJWT(context.Context, *RefreshJWTRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewJWT not implemented")
}
func (*UnimplementedAuthServiceApiServer) ValidateAppToken(context.Context, *AppTokenRequest) (*AppTokenValidation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAppToken not implemented")
}
func (*UnimplementedAuthServiceApiServer) GenerateTempToken(context.Context, *TempTokenInfo) (*TempToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTempToken not implemented")
}
func (*UnimplementedAuthServiceApiServer) ValidateTempToken(context.Context, *TempToken) (*TempTokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTempToken not implemented")
}
func (*UnimplementedAuthServiceApiServer) GetTempTokens(context.Context, *TempTokenInfo) (*TempTokenInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTempTokens not implemented")
}
func (*UnimplementedAuthServiceApiServer) DeleteTempToken(context.Context, *TempToken) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTempToken not implemented")
}
func (*UnimplementedAuthServiceApiServer) PurgeUserTempTokens(context.Context, *TempTokenInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeUserTempTokens not implemented")
}

func RegisterAuthServiceApiServer(s *grpc.Server, srv AuthServiceApiServer) {
	s.RegisterService(&_AuthServiceApi_serviceDesc, srv)
}

func _AuthServiceApi_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_LoginWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithEmailMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).LoginWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/LoginWithEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).LoginWithEmail(ctx, req.(*LoginWithEmailMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_SignupWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupWithEmailMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).SignupWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/SignupWithEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).SignupWithEmail(ctx, req.(*SignupWithEmailMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_SwitchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).SwitchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/SwitchProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).SwitchProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_ValidateJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).ValidateJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/ValidateJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).ValidateJWT(ctx, req.(*JWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_RenewJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).RenewJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/RenewJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).RenewJWT(ctx, req.(*RefreshJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_ValidateAppToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).ValidateAppToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/ValidateAppToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).ValidateAppToken(ctx, req.(*AppTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_GenerateTempToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).GenerateTempToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/GenerateTempToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).GenerateTempToken(ctx, req.(*TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_ValidateTempToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).ValidateTempToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/ValidateTempToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).ValidateTempToken(ctx, req.(*TempToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_GetTempTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).GetTempTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/GetTempTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).GetTempTokens(ctx, req.(*TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_DeleteTempToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).DeleteTempToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/DeleteTempToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).DeleteTempToken(ctx, req.(*TempToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_PurgeUserTempTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).PurgeUserTempTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/PurgeUserTempTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).PurgeUserTempTokens(ctx, req.(*TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthServiceApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inf.auth_service_api.AuthServiceApi",
	HandlerType: (*AuthServiceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _AuthServiceApi_Status_Handler,
		},
		{
			MethodName: "LoginWithEmail",
			Handler:    _AuthServiceApi_LoginWithEmail_Handler,
		},
		{
			MethodName: "SignupWithEmail",
			Handler:    _AuthServiceApi_SignupWithEmail_Handler,
		},
		{
			MethodName: "SwitchProfile",
			Handler:    _AuthServiceApi_SwitchProfile_Handler,
		},
		{
			MethodName: "ValidateJWT",
			Handler:    _AuthServiceApi_ValidateJWT_Handler,
		},
		{
			MethodName: "RenewJWT",
			Handler:    _AuthServiceApi_RenewJWT_Handler,
		},
		{
			MethodName: "ValidateAppToken",
			Handler:    _AuthServiceApi_ValidateAppToken_Handler,
		},
		{
			MethodName: "GenerateTempToken",
			Handler:    _AuthServiceApi_GenerateTempToken_Handler,
		},
		{
			MethodName: "ValidateTempToken",
			Handler:    _AuthServiceApi_ValidateTempToken_Handler,
		},
		{
			MethodName: "GetTempTokens",
			Handler:    _AuthServiceApi_GetTempTokens_Handler,
		},
		{
			MethodName: "DeleteTempToken",
			Handler:    _AuthServiceApi_DeleteTempToken_Handler,
		},
		{
			MethodName: "PurgeUserTempTokens",
			Handler:    _AuthServiceApi_PurgeUserTempTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth-service-api.proto",
}
